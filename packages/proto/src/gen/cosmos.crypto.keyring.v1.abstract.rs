#[doc = " Record is used for representing a key in the keyring."]
#[derive(:: serde :: Serialize, :: serde :: Deserialize)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, :: prost :: Message)]
pub struct Record<A: Clone + PartialEq + Default + Send + Sync + prost::Message> {
    #[doc = " name represents a name of Record"]
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[doc = " pub_key represents a public key in any format"]
    #[prost(message, optional, tag = "2")]
    pub pub_key: ::core::option::Option<crate::any::Any<A>>,
    #[doc = " Record contains one of the following items"]
    #[prost(oneof = "record::Item", tags = "3, 4, 5, 6")]
    pub item: ::core::option::Option<record::Item>,
}
#[doc = " Nested message and enum types in `Record`."]
pub mod record {
    #[doc = " Item is a keyring item stored in a keyring backend."]
    #[doc = " Local item"]
    #[derive(:: serde :: Serialize, :: serde :: Deserialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, :: prost :: Message)]
    pub struct Local {
        #[prost(message, optional, tag = "1")]
        pub priv_key: ::core::option::Option<::pbjson_types::Any>,
    }
    impl ::prost::Name for Local {
        const NAME: &'static str = "Local";
        const PACKAGE: &'static str = "cosmos.crypto.keyring.v1";
        fn full_name() -> ::prost::alloc::string::String {
            ::prost::alloc::format!("cosmos.crypto.keyring.v1.Record.{}", Self::NAME)
        }
    }
    #[doc = " Ledger item"]
    #[derive(:: serde :: Serialize, :: serde :: Deserialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, :: prost :: Message)]
    pub struct Ledger {
        #[prost(message, optional, tag = "1")]
        pub path: ::core::option::Option<super::super::super::hd::v1::Bip44Params>,
    }
    impl ::prost::Name for Ledger {
        const NAME: &'static str = "Ledger";
        const PACKAGE: &'static str = "cosmos.crypto.keyring.v1";
        fn full_name() -> ::prost::alloc::string::String {
            ::prost::alloc::format!("cosmos.crypto.keyring.v1.Record.{}", Self::NAME)
        }
    }
    #[doc = " Multi item"]
    #[derive(:: serde :: Serialize, :: serde :: Deserialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, :: prost :: Message)]
    pub struct Multi {}
    impl ::prost::Name for Multi {
        const NAME: &'static str = "Multi";
        const PACKAGE: &'static str = "cosmos.crypto.keyring.v1";
        fn full_name() -> ::prost::alloc::string::String {
            ::prost::alloc::format!("cosmos.crypto.keyring.v1.Record.{}", Self::NAME)
        }
    }
    #[doc = " Offline item"]
    #[derive(:: serde :: Serialize, :: serde :: Deserialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, :: prost :: Message)]
    pub struct Offline {}
    impl ::prost::Name for Offline {
        const NAME: &'static str = "Offline";
        const PACKAGE: &'static str = "cosmos.crypto.keyring.v1";
        fn full_name() -> ::prost::alloc::string::String {
            ::prost::alloc::format!("cosmos.crypto.keyring.v1.Record.{}", Self::NAME)
        }
    }
    #[doc = " Record contains one of the following items"]
    #[derive(:: serde :: Serialize, :: serde :: Deserialize)]
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, :: prost :: Oneof)]
    pub enum Item {
        #[doc = " local stores the private key locally."]
        #[prost(message, tag = "3")]
        Local(Local),
        #[doc = " ledger stores the information about a Ledger key."]
        #[prost(message, tag = "4")]
        Ledger(Ledger),
        #[doc = " Multi does not store any other information."]
        #[prost(message, tag = "5")]
        Multi(Multi),
        #[doc = " Offline does not store any other information."]
        #[prost(message, tag = "6")]
        Offline(Offline),
    }
}
impl<A: Clone + PartialEq + Default + Send + Sync + prost::Message> ::prost::Name for Record<A> {
    const NAME: &'static str = "Record";
    const PACKAGE: &'static str = "cosmos.crypto.keyring.v1";
    fn full_name() -> ::prost::alloc::string::String {
        ::prost::alloc::format!("cosmos.crypto.keyring.v1.{}", Self::NAME)
    }
}
#[doc = " Encoded file descriptor set for the `cosmos.crypto.keyring.v1` package"]
#[cfg(feature = "proto-descriptor")]
#[cfg_attr(docsrs, doc(cfg(feature = "proto-descriptor")))]
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0xad, 0x0f, 0x0a, 0x25, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x72, 0x79, 0x70,
    0x74, 0x6f, 0x2f, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
    0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x73, 0x6d,
    0x6f, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e,
    0x67, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
    0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x72,
    0x79, 0x70, 0x74, 0x6f, 0x2f, 0x68, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x64, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x22, 0xea, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x12,
    0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
    0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65,
    0x79, 0x12, 0x3e, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
    0x2e, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f,
    0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61,
    0x6c, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
    0x6f, 0x2e, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
    0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x65,
    0x64, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x05, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x79,
    0x70, 0x74, 0x6f, 0x2e, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52,
    0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x00, 0x52, 0x05, 0x6d,
    0x75, 0x6c, 0x74, 0x69, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18,
    0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x63,
    0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
    0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x48,
    0x00, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x38, 0x0a, 0x05, 0x4c, 0x6f,
    0x63, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x76, 0x5f, 0x6b, 0x65, 0x79, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x72, 0x69,
    0x76, 0x4b, 0x65, 0x79, 0x1a, 0x3e, 0x0a, 0x06, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x12, 0x34,
    0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
    0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x68, 0x64, 0x2e,
    0x76, 0x31, 0x2e, 0x42, 0x49, 0x50, 0x34, 0x34, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x04,
    0x70, 0x61, 0x74, 0x68, 0x1a, 0x07, 0x0a, 0x05, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x1a, 0x09, 0x0a,
    0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
    0x42, 0x35, 0xc8, 0xe1, 0x1e, 0x00, 0x98, 0xe3, 0x1e, 0x00, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
    0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
    0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f,
    0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0xee, 0x09, 0x0a, 0x06, 0x12, 0x04, 0x01, 0x00,
    0x2f, 0x01, 0x0a, 0x22, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x01, 0x00, 0x12, 0x1a, 0x18, 0x20, 0x53,
    0x69, 0x6e, 0x63, 0x65, 0x3a, 0x20, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
    0x20, 0x30, 0x2e, 0x34, 0x36, 0x0a, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x00, 0x21,
    0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x04, 0x00, 0x1e, 0x0a, 0x09, 0x0a, 0x02, 0x03,
    0x01, 0x12, 0x03, 0x05, 0x00, 0x23, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02, 0x12, 0x03, 0x06, 0x00,
    0x26, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x08, 0x00, 0x57, 0x0a, 0x09, 0x0a, 0x02, 0x08,
    0x0b, 0x12, 0x03, 0x08, 0x00, 0x57, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03, 0x09, 0x00, 0x2f,
    0x0a, 0x0b, 0x0a, 0x04, 0x08, 0x99, 0xec, 0x03, 0x12, 0x03, 0x09, 0x00, 0x2f, 0x0a, 0x08, 0x0a,
    0x01, 0x08, 0x12, 0x03, 0x0a, 0x00, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xb3, 0xec, 0x03, 0x12,
    0x03, 0x0a, 0x00, 0x2f, 0x0a, 0x43, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x0d, 0x00, 0x2f, 0x01,
    0x1a, 0x37, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65,
    0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x69,
    0x6e, 0x67, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x0a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01,
    0x12, 0x03, 0x0d, 0x08, 0x0e, 0x0a, 0x2f, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x0f,
    0x02, 0x12, 0x1a, 0x22, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
    0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x52,
    0x65, 0x63, 0x6f, 0x72, 0x64, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12,
    0x03, 0x0f, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0f,
    0x09, 0x0d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x0f, 0x10, 0x11,
    0x0a, 0x3c, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x11, 0x02, 0x22, 0x1a, 0x2f, 0x20,
    0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
    0x74, 0x73, 0x20, 0x61, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x20,
    0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x11, 0x02, 0x15, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x11, 0x16, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x11, 0x20, 0x21, 0x0a, 0x3a, 0x0a, 0x04, 0x04, 0x00, 0x08, 0x00,
    0x12, 0x04, 0x14, 0x02, 0x1d, 0x03, 0x1a, 0x2c, 0x20, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x74,
    0x65, 0x6d, 0x73, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x08, 0x00, 0x01, 0x12, 0x03, 0x14,
    0x08, 0x0c, 0x0a, 0x34, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x16, 0x04, 0x14, 0x1a,
    0x27, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x20, 0x74,
    0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6c,
    0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02,
    0x06, 0x12, 0x03, 0x16, 0x04, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x16, 0x0a, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x16,
    0x12, 0x13, 0x0a, 0x40, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x18, 0x04, 0x16, 0x1a,
    0x33, 0x20, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x20, 0x6b,
    0x65, 0x79, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x06, 0x12, 0x03, 0x18,
    0x04, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x18, 0x0b, 0x11,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x18, 0x14, 0x15, 0x0a, 0x3a,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x1a, 0x04, 0x14, 0x1a, 0x2d, 0x20, 0x4d, 0x75,
    0x6c, 0x74, 0x69, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x6f,
    0x72, 0x65, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66,
    0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x04, 0x06, 0x12, 0x03, 0x1a, 0x04, 0x09, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04,
    0x01, 0x12, 0x03, 0x1a, 0x0a, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12,
    0x03, 0x1a, 0x12, 0x13, 0x0a, 0x3c, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x1c, 0x04,
    0x18, 0x1a, 0x2f, 0x20, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73,
    0x20, 0x6e, 0x6f, 0x74, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6f,
    0x74, 0x68, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x06, 0x12, 0x03, 0x1c, 0x04, 0x0b,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x1c, 0x0c, 0x13, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x1c, 0x16, 0x17, 0x0a, 0x4f, 0x0a, 0x04,
    0x04, 0x00, 0x03, 0x00, 0x12, 0x04, 0x21, 0x02, 0x23, 0x03, 0x1a, 0x41, 0x20, 0x49, 0x74, 0x65,
    0x6d, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x69,
    0x74, 0x65, 0x6d, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20,
    0x6b, 0x65, 0x79, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
    0x0a, 0x20, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x03, 0x00, 0x01, 0x12, 0x03, 0x21, 0x0a, 0x0f, 0x0a, 0x0d, 0x0a, 0x06, 0x04,
    0x00, 0x03, 0x00, 0x02, 0x00, 0x12, 0x03, 0x22, 0x04, 0x25, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x22, 0x04, 0x17, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x22, 0x18, 0x20, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x22, 0x23, 0x24, 0x0a, 0x1b, 0x0a, 0x04, 0x04, 0x00,
    0x03, 0x01, 0x12, 0x04, 0x26, 0x02, 0x28, 0x03, 0x1a, 0x0d, 0x20, 0x4c, 0x65, 0x64, 0x67, 0x65,
    0x72, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x03, 0x01, 0x01,
    0x12, 0x03, 0x26, 0x0a, 0x10, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x12,
    0x03, 0x27, 0x04, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x27, 0x04, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x27, 0x16, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x01, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x27, 0x1d, 0x1e, 0x0a, 0x19, 0x0a, 0x04, 0x04, 0x00, 0x03, 0x02, 0x12, 0x03, 0x2b, 0x02,
    0x12, 0x1a, 0x0c, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x03, 0x02, 0x01, 0x12, 0x03, 0x2b, 0x0a, 0x0f, 0x0a, 0x1b, 0x0a,
    0x04, 0x04, 0x00, 0x03, 0x03, 0x12, 0x03, 0x2e, 0x02, 0x14, 0x1a, 0x0e, 0x20, 0x4f, 0x66, 0x66,
    0x6c, 0x69, 0x6e, 0x65, 0x20, 0x69, 0x74, 0x65, 0x6d, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x03, 0x03, 0x01, 0x12, 0x03, 0x2e, 0x0a, 0x11, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];
